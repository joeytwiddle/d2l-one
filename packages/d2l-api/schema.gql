# Introducing various scalars here was not a good idea, because we can no longer identify them with a primitive (string, int, ...)
# The generated TypeScript just say 'any' for all these types
# https://stackoverflow.com/questions/59038921/how-to-alias-a-type-e-g-string-int
# TODO: Therefore we should remove these, and just use primitive types throughout the schema
scalar UserID
scalar RescueID
# A string of the form "Sheet Name!R12C34"
scalar SheetCell
scalar SiteID
# A string of the form YYYYMMDD, e.g. "20211231"
scalar DateDayString
# A string of the form "19:00" or "ANY"
scalar CollectionTime

# Fixes an issue with allRescuesForMonth()
scalar String

schema {
  query: Query
  mutation: Mutation
}

type Query {
  me: User
  #user(id: UserID!): User
  #allUsers: [User!]
  rescues: [RescueLite!]
  allRescuesForMonth(month: String!): [RescueLite!]
  allSites: [Site!]
  myRescues: [Rescue!]
  siteGroupsForCurrentUser: [SiteGroup!]
  bookingLimitsForCurrentUser: [SiteGroupLimit!]
  availableRescuesForCurrentUser: [RescueLite!]
  #search(term: String!): [SearchResult!]!
}

type Mutation {
  logIn(username: String!, password: String!): BooleanResponse!
  assignSelfToRescue(rescueId: RescueID!): Rescue!
  unassignSelfFromRescue(rescueId: RescueID!): Rescue!
}

enum Role {
  USER
  ADMIN
}

type User {
  id: UserID!
  name: String!
  telegramName: String!
  telegramUsername: String!
  email: String
  role: Role!
}

# This is a User object with limited data which can be safely shown to other users
type UserPublic {
  id: UserID!
  name: String!
}

type Rescue {
  id: RescueID!
  date: DateDayString!
  sheetCell: SheetCell
  site: Site!
  rescuer: UserPublic
}

# This is a Rescue object but there is no expandable site
# The site must instead be looked up from allSites using the siteId
type RescueLite {
  id: RescueID!
  date: DateDayString!
  sheetCell: SheetCell
  siteId: SiteID!
  rescuer: UserPublic
}

type Site {
  id: SiteID!
  fullName: String!
  collectionTime: CollectionTime!
  callRequired: Boolean
  expectedCollectibles: String
  area: String!
  geoLocation: String!
  directions: String
  siteAmbaddasadors: String
  siteContacts: String
  rules: String
}

type BooleanResponse {
  success: Boolean!
  reason: String
}

type SiteGroup {
  groupName: String!
  memberGroup: String!
  bookLimit: Int!
  sites: [String!]
}

type SiteGroupLimit {
  siteGroupName: String!
  sites: [String!]!
  limit: Int!
  remaining: Int!
}

query GetUser {
  me {
    id
    name
  }
}

query GetMyRescues {
  myRescues {
    id
    date
    site {
      id
      fullName
      collectionTime
      area
      geoLocation
      directions
      rules
    }
  }
}

query GetAllRescuesForMonth($month: String!) {
  allRescuesForMonth(month: $month) {
    id
    date
    siteId
    rescuer {
      id
      name
    }
  }
}

query GetAllRescues {
  rescues {
    id
    date
    siteId
    rescuer {
      id
      name
    }
  }
}

query GetAllSites {
  allSites {
    id
    fullName
    collectionTime
    callRequired
    expectedCollectibles
    area
    geoLocation
    directions
    siteAmbaddasadors
    siteContacts
    rules
  }
}

query GetSiteGroupsForCurrentUser {
  siteGroupsForCurrentUser {
    groupName
    memberGroup
    bookLimit
    sites
  }
}

query GetBookingLimitsForCurrentUser {
  bookingLimitsForCurrentUser {
    siteGroupName
    sites
    limit
    remaining
  }
}

query GetAvailableRescuesForCurrentUser {
  availableRescuesForCurrentUser {
    id
    date
    siteId
  }
}

mutation LogIn($username: String!, $password: String!) {
  logIn(username: $username, password: $password) {
    success
    reason
  }
}

mutation AssignSelfToRescue($rescueId: RescueID!) {
  assignSelfToRescue(rescueId: $rescueId) {
    id
    rescuer {
      id
    }
  }
}

mutation UnassignSelfFromRescue($rescueId: RescueID!) {
  unassignSelfFromRescue(rescueId: $rescueId) {
    id
    rescuer {
      id
    }
  }
}
